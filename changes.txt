CHANGED:
Player:
- position is an int (not a Square)
- Buying properties:
    - buyOrDeny() returns a boolean
    - pay() can be used to pay a player if one is provided, otherwise pays the bank
    - If buyOrDeny() is true, pay() will be called with no player provided (i.e. pay
        the bank), and a GSC will be returned making the payment

Auction sequence:
- When asked to bid, player returns an int with their bid
- If the player wins, the engine calls pay() with that bid, and the player then returns a GSC making the payment
- GS applies the changes
- Execution of bid method is timed and used  to break ties

Square:
- Added properties for square metadata

Property:
- Instance variable for number of properties in the property group

Color Property:
- Updated initializers to take parameters needed for property initializer

GameState:
- Method to check if a given GSC builds evenly
    - Insert after checking are_enough_houses in seq-diag-decision-making
- Added hotels_remaining and houses_remaining properties
- Added are_enough_hotels method

GSC:
- Can't combine house and hotel requests on the same property into one GSC

Engine:
- Removed initialize() method
- Added run() method
- Renamed roll() to take_turn(), which processes a player's turn
- Made static method roll() that just returns an integer roll 1-12

Card:
- Also uses GameStateChange.combine() in pay_each_player_50() and receive_50_from_each_player()

HousingResolver:
- See separate section below: "Housing"

-----------------------------------------------------------------------------
Housing
	How housing conflicts are resolved

HousingResolver:
	The HousingResolver takes in a set of housing conditions, and uses a set of
	rules to determine when houses/hotels are built, auctioned, and denied to
	players.

	HousingResolver is passed:
	- Dictionary: Players -> BuildingRequests
	- GameState

	The following conditions are required by the HousingResolver to make these
	decisions:
	- total houses left on the market
	- total houses requested to be built
	- total houses requested to be demolished
	- total hotels left on the market
	- total hotels requested to be built
	- total hotels requested to be demolished

	These conditions collectively determine the state of the housing market. The
	HousingResolver gathers the build/demo conditions from the BuildingRequests
	passed to it and the "left on the market" conditions from the GameState.

	When it analyzes the housing conditions, it will ultimately arrive at some
	order in which to apply the changes (e.g. build the houses first, then
	build the hotels, then demo the hotels, etc.). If there are no shortages,
	this will work just fine - the HousingResolver will simply extract the
	GroupOfChanges corresponding to the changes it intends to make, and then
	apply them.
		(Note that the HousingResolver applies changes to the GameState
		directly, rather than creating a GroupOfChanges to return back to the
		Engine. The reason for this will become clear later.)

	However, when there is a shortage, the HousingResolver needs to call an
	auction among all the players. The result of the auction will ultimately be
	a GroupOfChanges from one player that builds one house/hotel and modifies
	their funds accordingly. The HousingResolver then applies this
	GroupOfChanges. This process repeats until players no longer participate in
	the auction or until no houses/hotels are left to auction.
		(This is why the HousingResolver must apply changes directly: auctions 
		require that players know the state of the game in realtime, including 
		any housing changes that may have been made just before the auction.)

	After houses have been built, the conditions for hotel demolitions may have
	changed. For instance, when a player requested a hotel demo, there may have
	been 4 houses available, but after houses were built there may be only 3.
	Thus, the HousingResolver must ask this player if he would still like to
	demo, and if so, how many houses he will take. The player returns a
	GroupOfChanges in this process, which specifies the hotels he will demo,
	houses he will build, and corresponding modifications to his funds. If 
	multiple players are in this condition, they will have to auction for those 
	remaining houses, and the procedure above will apply.

	At the end of this process, the HousingResolver will have applied all the
	building changes to the GameState, and it will return.


The rules for the HousingResolver:
No shortage
- DEMO HOTELS
- BUILD HOUSES
- BUILD HOTELS

Hotel shortage
- BUILD HOUSES
- DEMO HOTELS
- BUILD HOTELS

Housing shortage
- BUILD HOTELS
- BUILD HOUSES
- DEMO HOTELS

Hotel + housing shortage
- BUILD HOUSES
- DEMO HOTELS
- BUILD HOTELS

See design/housing-conflicts.png for a diagram of control flow

-------------------------------------------------------------------------------------
TODO

M	- Finish HousingResolver
		- Including mechanism for asking a player if they want to go through with new housing conditions after they've been changed (see HousingResolver)
M	- Write BuildingRequests
L	- Write NotificationChanges
L	- Finish Engine
M/L	- Write DecisionMaker
M/L	- Validation?
M	- Remove get out of jail free from the deck while a player has it