CHANGED:
Player:
- position is an int (not a Square)
- Buying properties:
    - buyOrDeny() returns a boolean
    - pay() can be used to pay a player if one is provided, otherwise pays the bank
    - If buyOrDeny() is true, pay() will be called with no player provided (i.e. pay
        the bank), and a GSC will be returned making the payment

Auction sequence:
- When asked to bid, player returns an int with their bid
- If the player wins, the engine calls pay() with that bid, and the player then returns a GSC making the payment
- GS applies the changes
- Execution of bid method is timed and used  to break ties

Square:
- Added properties for square metadata

Property:
- Instance variable for number of properties in the property group

Color Property:
- Updated initializers to take parameters needed for property initializer

GameState:
- Method to check if a given GSC builds evenly
    - Insert after checking are_enough_houses in seq-diag-decision-making
- Added hotels_remaining and houses_remaining properties
- Added are_enough_hotels method

GSC:
- Can't combine house and hotel requests on the same property into one GSC

Engine:
- Removed initialize() method
- Added run() method
- Renamed roll() to take_turn(), which processes a player's turn
- Made static method roll() that just returns an integer roll 1-12

Card:
- Also uses GameStateChange.combine() in pay_each_player_50() and receive_50_from_each_player()

HousingResolver:
- See design/housing-resolver.txt

-------------------------------------------------------------------------------------
TODO

M	- Finish HousingResolver
		- Including mechanism for asking a player if they want to go through with new housing conditions after they've been changed (see HousingResolver)
M	- Write BuildingRequests
L	- Write NotificationChanges
L	- Finish Engine
M/L	- Write DecisionMaker
M/L	- Validation?
M	- Remove get out of jail free from the deck while a player has it