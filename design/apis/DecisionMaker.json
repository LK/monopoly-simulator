{
	"name": "DecisionMaker",

	"description": "The DecisionMaker represents the 'brain' of the Player. Whenever the Player must take action on some event, it outsources its decision-making process to its DecisionMaker, which then returns the action it 'thinks' is in the Player's best interests. It is designed as an interface, which defines a method for each of the possible decisions a Player must make in the game. We designed the decision-making process this way to enable different Players to have different 'strategies', which are defined by their respective DecisionMakers. An instance of DecisionMaker must implement all of the methods defined in this API.",

	"constants": [],

	"instanceVariables": [],

	"methodCategories": [

		{
			"category": "Constructors",
			"methods": [

				{
					"name": "__init__()",
					"arguments": [],
					"returnType": "DecisionMaker",
					"access": "Public",
					"description": "Initializes a DecisionMaker"
				}

			]
		},

		{
			"category": "Getters",
			"methods": []
		},

		{
			"category": "Setters",
			"methods": []
		},

		{
			"category": "Static",
			"methods": []
		},

		{
			"category": "Other",
			"methods": [

				{
					"name": "buy_or_deny()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "prop",
							"type": "Property"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines whether or not the given Property is worth buying for the given Player, and returns a GroupOfChanges that either buys it or does nothing"
				},

				{
					"name": "pay()",
					"arguments": [
						{
							"name": "player_from",
							"type": "Player"
						},

						{
							"name": "player_to",
							"type": "Player"
						},

						{
							"name": "amount",
							"type": "int"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines how the first Player should break down the payment of the given amount to the second Player. Returns a GroupOfChanges that pays the second Player that amount, making the corresponding adjustments to the first Player's hand"
				},

				{
					"name": "bid_house_builds()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "highest_bid",
							"type": "int"
						},

						{
							"name": "props_to_build_on",
							"type": "Property[]",
							"description": "Contains the Property objects on which the given Player requested to build houses when submitting his last BuildingRequests"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines how much the given Player should be willing to bid to build a house on any one of the Property objects provided, in response to the highest bid. Returns the GroupOfChanges in which the given Player buys and builds the house at that bid"
				},

				{
					"name": "bid_hotel_builds()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "highest_bid",
							"type": "int"
						},

						{
							"name": "props_to_build_on",
							"type": "Property[]",
							"description": "Contains the Property objects on which the given Player requested to build hotels when submitting his last BuildingRequests"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines how much the given Player should be willing to bid to build a hotel on any one of the Property objects provided, in response to the highest bid. Returns the GroupOfChanges in which the given Player buys and builds the hotel at that bid"
				},

				{
					"name": "bid_hotel_demolitions()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "highest_bid",
							"type": "int"
						},

						{
							"name": "props_to_demolish_on",
							"type": "Property[]",
							"description": "Contains the Property objects on which the given Player requested to demolish hotels when submitting his last BuildingRequests"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines how much the given Player should be willing to bid to demolish a hotel (and, as a result, take 4 houses off the market) on any one of the Property objects provided, in response to the highest bid. Returns the GroupOfChanges in which the given Player demolishes the hotel at that bid"
				},

				{
					"name": "will_trade()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "proposal",
							"type": "GroupOfChanges"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "boolean",
					"access": "Public",
					"description": "Determines whether or not the given Player should be willing to accept the given GroupOfChanges to the GameState. Returns True if the Player should, False if not"
				},

				{
					"name": "respond_to_state()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "new_state",
							"type": "GameState"
						}
					],
					"returnType": "NotificationChanges",
					"access": "Public",
					"description": "Returns the NotificationChanges the given Player should make in response to the new GameState"
				},

				{
					"name": "revise_hotel_demolitions()",
					"arguments": [
						{
							"name": "player",
							"type": "Player"
						},

						{
							"name": "original_hotel_demolitions",
							"type": "GroupOfChanges"
						},

						{
							"name": "state",
							"type": "GameState"
						}
					],
					"returnType": "GroupOfChanges",
					"access": "Public",
					"description": "Determines whether or not the given Player should revise his hotel demolitions in the event that the GameState has changed since he first submitted them (i.e. when the HousingResolver has allowed houses to be taken off the market before hotels were demolished). Returns the GroupOfChanges that either makes new hotel demolitions or does nothing"
				}				

			]
		},

		{
			"category": "Other",
			"methods": []
		}

	],

	"subclasses": []

}