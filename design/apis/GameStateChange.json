{
	"GameStateChange": {

		"Description": "A GameStateChange represents the smallest, 'atomic' set of changes that must be made to transition from one legal GameState to another legal GameState. It is a container for all the components of a state transition, and is the the root mechanism through which the GameState can be changed.",
	
		"Constants": {
	
			
	
		},
	
		"Instance Variables": {
	
			"_change_in_cash": {
				"Type": "{ Player: int }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to their change in cash"
			},

			"_new_position": {
				"Type": "{ Player: int }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to their new position on the board (represented as an int index)"
			},

			"_added_props": {
				"Type": "{ Player: Property[] }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to a list of Property objects they receive"
			},

			"_removed_props": {
				"Type": "{ Player: Property[] }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to a list of Property objects they give away/lose"
			},

			"_change_in_jail_moves": {
				"Type": "{ Player: int }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to the change in their 'in-jail moves'"
			},

			"_change_in_jail_free_count": {
				"Type": "{ Player: int }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to the change in the number of 'Get out of jail free' cards they have"
			},

			"_is_in_game": {
				"Type": "{ Player: boolean }",
				"Default": "{ }",
				"Description": "Dictionary mapping Players to their new in-game status (if it changed) - True if a Player is still in the game, False if he went bankrupt"
			},

			"_change_in_houses": {
				"Type": "{ ColorProperty: int }",
				"Default": "{ }",
				"Description": "Dictionary mapping ColorProperty objects to the change in houses present on them"
			},

			"_change_in_houses_remaining": {
				"Type": "int",
				"Description": "The amount by which the number of houses available on the market increases or decreases"
			},

			"_change_in_hotels_remaining": {
				"Type": "int",
				"Description": "The amount by which the number of hotels available on the market increases or decreases"
			},

			"_is_mortgaged": {
				"Type": "{ Property: boolean }",
				"Default": "{ }",
				"Description": "Dictionary mapping Property objects to their mortgage status (if it changed) - True if mortgaged, False if not"
			}
	
		},
	
		"Methods": {
	
			"Getters": {
	
				"change_in_cash()": {
					"Arguments": { },
					"Returns": "{ Player: int }",
					"Access": "Public",
					"Description": "Returns this instance's change_in_cash dictionary"
				},

				"new_position()": {
					"Arguments": { },
					"Returns": "{ Player: int }",
					"Access": "Public",
					"Description": "Returns this instance's new_position dictionary"
				},

				"added_props()": {
					"Arguments": { },
					"Returns": "{ Player: Property[] }",
					"Access": "Public",
					"Description": "Returns this instance's added_props dictionary"
				},

				"removed_props()": {
					"Arguments": { },
					"Returns": "{ Player: Property[] }",
					"Access": "Public",
					"Description": "Returns this instance's removed_props dictionary"
				},

				"change_in_jail_moves()": {
					"Arguments": { },
					"Returns": "{ Player: int }",
					"Access": "Public",
					"Description": "Returns this instance's change_in_jail_moves dictionary"
				},

				"change_in_jail_free_count()": {
					"Arguments": { },
					"Returns": "{ Player: int }",
					"Access": "Public",
					"Description": "Returns this instance's change_in_jail_free_count dictionary"
				},

				"is_in_game()": {
					"Arguments": { },
					"Returns": "{ Player: boolean }",
					"Access": "Public",
					
					"Description": "Returns this instance's is_in_game dictionary"
				},

				"change_in_houses()": {
					"Arguments": { },
					"Returns": "{ ColorProperty: int }",
					"Access": "Public",
					"Description": "Returns this instance's change_in_houses dictionary"
				},

				"change_in_houses_remaining()": {
					"Arguments": { },
					"Returns": "int",
					"Access": "Public",
					"Description": "Returns this instance's change_in_houses_remaining"
				},

				"change_in_hotels_remaining()": {
					"Arguments": { },
					"Returns": "int",
					"Access": "Public",
					"Description": "Returns this instance's change_in_hotels_remaining"
				},

				"is_mortgaged()": {
					"Arguments": { },
					"Returns": "{ Property: boolean }",
					"Access": "Public",
					"Description": "Returns this instance's is_mortgaged dictionary"
				}
	
			},
	
			"Setters": {
	
				
	
			},
	
			"Static": {
	
				"transfer_money()": {
					"Arguments": {
						"player_from": "Player",
						"player_to": "Player",
						"amount": "int"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that transfers the given amount of money from one Player to another"
				},

				"transfer_property()": {
					"Arguments": {
						"player_from": "Player",
						"player_to": "Player",
						"prop": "Property"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that transfers the given Property from one Player to another"
				},

				"buy_property()": {
					"Arguments": {
						"player": "Player",
						"prop": "Property",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that purchases the given Property for the given Player"
				},

				"change_position()": {
					"Arguments": {
						"player": "Player",
						"new_position": "int",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that moves the given Player to the given position (index on the board). Uses the bank to pay the Player money if they pass Go"
				},

				"mortgage()": {
					"Arguments": {
						"prop": "Property",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that mortgages the given property. Uses the bank to give the owner mortgage money"
				},

				"unmortgage()": {
					"Arguments": {
						"prop": "Property",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that unmortgages the given property. Uses the bank so the Player can repay the mortgage money"
				},

				"build()": {
					"Arguments": {
						"prop": "ColorProperty",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that builds one house/hotel on the given ColorProperty"
				},

				"demolish()": {
					"Arguments": {
						"prop": "ColorProperty",
						"bank": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Returns a GameStateChange that demolishes one house/hotel on the given ColorProperty"
				},

				"send_to_jail()": {
					"Arguments": {
						"player": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Sends the given Player to jail and keeps them there for 3 moves (unless they later get out by rolling doubles, paying the fee, or using a 'Get out of jail free' card"
				},

				"decrement_in_jail_moves()": {
					"Arguments": {
						"player": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "If the given Player is in jail, decrements the number of moves the Player still has before he can leave jail"
				},

				"leave_jail()": {
					"Arguments": {
						"player": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Immediately lets the given Player out of jail (often a result of rolling doubles, paying the fee, or using a 'Get out of jail free' card"
				},

				"increment_jail_card_count()": {
					"Arguments": {
						"player": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Adds one 'Get out of jail free' card to the given Player's hand"
				},

				"decrement_jail_card_count()": {
					"Arguments": {
						"player": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Removes one 'Get out of jail free' card from the given Player's hand"
				},

				"eliminate()": {
					"Arguments": {
						"player_eliminated": "Player",
						"player_eliminator": "Player"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Eliminates the given Player from the game, demolishing all houses on his color properties and transferring all of his belongings to the eliminator Player"
				}
	
			},
	
			"Other": {
	
				"__init__()": {
					"Arguments": {
						"change_in_cash": "{ Player: int }",
						"new_position": "{ Player: int }",
						"added_props": "{ Player: Property[] }",
						"removed_props": "{ Player: Property[] }",
						"change_in_jail_moves": "{ Player: int }",
						"change_in_jail_free_count": "{ Player: int }",
						"is_in_game": "{ Player: boolean }",
						"change_in_houses": "{ ColorProperty: int }",
						"is_mortgaged": "{ Property: boolean }"
					},
					"Returns": "GameStateChange",
					"Access": "Public",
					"Description": "Initializes this GameStateChange from the dictionaries provided. Note that a client should never initialize a GameStateChange from its __init__(). It should use one of the provided static methods, as they are the only legal GameStateChanges"
				}
	
			}
	
		}
	
	}
}