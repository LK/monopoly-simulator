{
	"Square": {
	
		"Description": "Represents a square on the Monopoly board. There are several types of squares, each implemented as a separate subclass of Square.",

		"Constants": {
			
			"MEDITERRANEAN_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Mediterranean Avenue' Square"
			},

			"BALTIC_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Baltic Avenue' Square"
			},

			"ORIENTAL_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Oriental Avenue' Square"
			},

			"VERMONT_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Vermont Avenue' Square"
			},

			"CONNECTICUT_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Connecticut Avenue' Square"
			},

			"ST_CHARLES_PLACE": {
				"Type": "String",
				"Description": "String representation of the 'St. Charles Place' Square"
			},

			"STATES_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'State Avenue' Square"
			},

			"VIRGINIA_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Virginia Avenue' Square"
			},

			"ST_JAMES_PLACE": {
				"Type": "String",
				"Description": "String representation of the 'St. James Place' Square"
			},

			"TENNESSEE_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Tennessee Avenue' Square"
			},

			"NEW_YORK_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'New York Avenue' Square"
			},

			"KENTUCKY_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Kentucky Avenue' Square"
			},

			"INDIANA_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Indiana Avenue' Square"
			},

			"ILLINOIS_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Illinois Avenue' Square"
			},

			"ATLANTIC_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Atlantic Avenue' Square"
			},

			"VENTNOR_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Ventnor Avenue' Square"
			},

			"MARVIN_GARDENS": {
				"Type": "String",
				"Description": "String representation of the 'Marvin Gardens' Square"
			},

			"PACIFIC_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Pacific Avenue' Square"
			},

			"NORTH_CAROLINA_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'North Carolina Avenue' Square"
			},

			"PENNSYLVANIA_AVENUE": {
				"Type": "String",
				"Description": "String representation of the 'Pennsylvania Avenue' Square"
			},

			"PARK_PLACE": {
				"Type": "String",
				"Description": "String representation of the 'Park Place' Square"
			},

			"BOARDWALK": {
				"Type": "String",
				"Description": "String representation of the 'Boardwalk' Square"
			},

			"READING_RAILROAD": {
				"Type": "String",
				"Description": "String representation of the 'Reading Railroad' Square"
			},

			"PENNSYLVANIA_RAILROAD": {
				"Type": "String",
				"Description": "String representation of the 'Pennsylvania Railroad' Square"
			},

			"B_AND_O_RAILROAD": {
				"Type": "String",
				"Description": "String representation of the 'B. & O. Railroad' Square"
			},

			"SHORT_LINE_RAILROAD": {
				"Type": "String",
				"Description": "String representation of the 'Short Line Railroad' Square"
			},

			"ELECTRIC_COMPANY": {
				"Type": "String",
				"Description": "String representation of the 'Electric Company' Square"
			},

			"WATER_WORKS": {
				"Type": "String",
				"Description": "String representation of the 'Water Works' Square"
			},

			"GO": {
				"Type": "String",
				"Description": "String representation of the 'Go' Square"
			},

			"JAIL": {
				"Type": "String",
				"Description": "String representation of the 'Jail' Square"
			},

			"FREE_PARKING": {
				"Type": "String",
				"Description": "String representation of the 'Free Parking' Square"
			},

			"GO_TO_JAIL": {
				"Type": "String",
				"Description": "String representation of the 'Go To Jail' Square"
			},

			"CHANCE_1": {
				"Type": "String",
				"Description": "String representation of the 'Chance' Square"
			},

			"CHANCE_2": {
				"Type": "String",
				"Description": "String representation of the 'Chance' Square"
			},

			"CHANCE_3": {
				"Type": "String",
				"Description": "String representation of the 'Chance' Square"
			},

			"COMMUNITY_CHEST_1": {
				"Type": "String",
				"Description": "String representation of the 'Community Chest' Square"
			},

			"COMMUNITY_CHEST_2": {
				"Type": "String",
				"Description": "String representation of the 'Community Chest' Square"
			},

			"COMMUNITY_CHEST_3": {
				"Type": "String",
				"Description": "String representation of the 'Community Chest' Square"
			},

			"INCOME_TAX": {
				"Type": "String",
				"Description": "String representation of the 'Income Tax' Square"
			},

			"LUXURY_TAX": {
				"Type": "String",
				"Description": "String representation of the 'Luxury Tax' Square"
			}

		},
	
		"Instance Variables": {
	
			"_name": {
				"Type": "String",
				"Description": "The name of this Square"
			}
	
		},
	
		"Methods": {
	
			"Getters": {
	
				"name()": {
					"Arguments": { },
					"Returns": "String",
					"Access": "Public",
					"Description": "Returns this instance's name"
				}
	
			},
	
			"Setters": {
	
				
	
			},
	
			"Static": {
	
				
	
			},
	
			"Other": {

				"__init__()": {
					"Arguments": {
						"name": "String"
					},
					"Returns": "Square",
					"Access": "Public",
					"Description": "Initializes a Square with the given name. Note that a Square should never be initialized by the Square.__init__(). It should be initialized by the __init__() of one of its subclasses"
				},
	
				"landed()": {
					"Arguments": {
						"player": {
							"Type": "Player",
							"Description": "The Player who landed on this Square"
						},
						"roll": {
							"Type": "int",
							"Description": "The roll the Player made to land on this Square"
						},
						"state": {
							"Type": "GameState",
							"Description": "The current GameState (just before the Player landed on this Square)"
						}
					},
					"Returns": "GroupOfChanges",
					"Access": "Public",
					"Description": "Returns a GroupOfChanges corresponding to the action required when the given Player lands on this Square. Implemented in subclasses. Note that this should never be called by a direct instance of Square; it should only be called by an instance of one of its subclasses"
				}				

			}
	
		},
	
		"Subclasses": {

			"Property": {

				"Description": "Represents a property on the Monopoly board. This is further broken down into two subclasses of Property: one for color properties, which are improvable, and one for non-color properties, which are not.",
		
				"Constants": {
			
					
			
				},
			
				"Instance Variables": {

					"_price": {
						"Type": "int",
						"Description": "Amount a Player must pay to buy this Property"
					},

					"_rents": {
						"Type": "int[]",
						"Description": "Amounts a Player must pay when landing on this Property, indexed by either number of houses on it (for color properties) or number of properties in property group owned (for non-color properties)"
					},

					"_property_group": {
						"Type": "int",
						"Description": "A label from 0-9 indicating the property group this Property belongs to"
					},

					"_size_of_property_group": {
						"Type": "int",
						"Default": "3",
						"Description": "Number of properties in the group to which this Property belongs"
					},

					"_mortgaged": {
						"Type": "boolean",
						"Default": "False",
						"Description": "Indicates the mortgage status of this Property"
					}
			
				},
			
				"Methods": {
			
					"Getters": {

						"price()": {
							"Arguments": { },
							"Returns": "int",
							"Access": "Public",
							"Description": "Returns this instance's price"
						},

						"rents()": {
							"Arguments": { },
							"Returns": "int[]",
							"Access": "Public",
							"Description": "Returns this instance's rents"
						},

						"property_group()": {
							"Arguments": { },
							"Returns": "int",
							"Access": "Public",
							"Description": "Returns this instance's property_group"
						},

						"size_of_property_group()": {
							"Arguments": { },
							"Returns": "int",
							"Access": "Public",
							"Description": "Returns the size_of_property_group for this Property"
						},

						"mortgaged()": {
							"Arguments": { },
							"Returns": "boolean",
							"Access": "Public",
							"Description": "Returns this instance's mortgaged status"
						}
			
					},
			
					"Setters": {
			
						"mortgaged()": {
							"Arguments": {
								"mortgaged": "boolean"
							},
							"Returns": "void",
							"Access": "Public",
							"Description": "Sets this instance's mortgaged status"
						}
			
					},
			
					"Static": {
			
						
			
					},
			
					"Other": {
			
						"__init__()": {
							"Arguments": {
								"name": "String",
								"price": "int",
								"rents": "int[]",
								"property_group": "int",
								"size_of_property_group": "int",
								"mortgaged": "boolean"
							},
							"Returns": "Property",
							"Access": "Public",
							"Description": "Initializes a Property object. Note that a Property should never be initialized directly from Property.__init__(). It should be initialized from one of Property's subclasses"
						},

						"landed()": {
							"Arguments": {
								"player": "Player",
								"roll": "int",
								"state": "GameState"
							},
							"Returns": "GroupOfChanges",
							"Access": "Public",
							"Overrides": "Square.landed()",
							"Description": "Returns the GroupOfChanges resulting from the Player's landing on this Property. Note that this should never be called by a direct instance of Property; it should only be called by an instance of one of its subclasses"
						}
			
					}
			
				},

				"Subclasses": {

					"ColorProperty": {

						"Description": "Represents a color property on the Monopoly board, which is the improvable type of property.",
					
						"Constants": {
					
							"NUM_HOUSES_BEFORE_HOTEL": {
								"Type": "int",
								"Description": "The number of houses a Player must build before upgrading to a hotel"
							}
					
						},
					
						"Instance Variables": {
					
							"_house_price": {
								"Type": "int",
								"Description": "The amount a Player must pay to build a house or hotel on this ColorProperty"
							},

							"_num_houses": {
								"Type": "int",
								"Default": "0",
								"Description": "The number of houses currently on this ColorProperty. We adopt the convention that when this equals NUM_HOUSES_BEFORE_HOTEL + 1, there is a hotel on this ColorProperty"
							}
					
						},
					
						"Methods": {
					
							"Getters": {

								"house_price()": {
									"Arguments": { },
									"Returns": "int",
									"Access": "Public",
									"Description": "Returns this instance's house_price"
								},
					
								"num_houses()": {
									"Arguments": { },
									"Returns": "int",
									"Access": "Public",
									"Description": "Returns this instance's num_houses"
								}
					
							},
					
							"Setters": {
					
								"num_houses()": {
									"Arguments": {
										"num_houses": "int"
									},
									"Returns": "void",
									"Access": "Public",
									"Description": "Sets this instance's num_houses"
								}
					
							},
					
							"Static": {
					
								
					
							},
					
							"Other": {
					
								"__init__()": {
									"Arguments": {
										"name": "String",
										"price": "int",
										"rents": "int[]",
										"property_group": "int",
										"size_of_property_group": "int",
										"mortgaged": "boolean",
										"house_price": "int",
										"num_houses": "int"
									},
									"Returns": "ColorProperty",
									"Access": "Public",
									"Description": "Initializes a ColorProperty object with the given number of houses"
								},

								"landed()": {
									"Arguments": {
										"player": "Player",
										"roll": "int",
										"state": "GameState"
									},
									"Returns": "GroupOfChanges",
									"Access": "Public",
									"Overrides": "Property.landed()",
									"Description": "Returns the GroupOfChanges resulting from the Player's landing on this ColorProperty"
								},

								"get_rent_with()": {
									"Arguments": {
										"num_houses": "int",
										"state": "GameState"
									},
									"Returns": "int",
									"Access": "Public",
									"Description": "Returns the amount a Player must pay on this ColorProperty with the given number of houses on it"
								},

								"build()": {
									"Arguments": {
										"qty": "int"
									},
									"Returns": "void",
									"Access": "Public",
									"Description": "Builds the given quantity of houses on this ColorProperty"
								},

								"demolish()": {
									"Arguments": {
										"qty": "int"
									},
									"Returns": "int",
									"Access": "Public",
									"Description": "Demolishes the given quantity of houses on this ColorProperty"
								},

								"has_hotel()": {
									"Arguments": { },
									"Returns": "boolean",
									"Access": "Public",
									"Description": "Returns True if this ColorProperty has a hotel on it, False if not"
								}
					
							}
					
						}
					
					},

					"NonColorProperty": {

						"Description": "Represents a non-color property on the board, which is not improvable. Namely, these are the railroads and utilities.",
					
						"Constants": {
					
							
					
						},
					
						"Instance Variables": {
					
							
					
						},
					
						"Methods": {
					
							"Getters": {
					
								
					
							},
					
							"Setters": {
					
								
					
							},
					
							"Static": {
					
								
					
							},
					
							"Other": {
					
								"landed()": {
									"Arguments": {
										"player": "Player",
										"roll": "int",
										"state": "GameState"
									},
									"Returns": "GroupOfChanges",
									"Access": "Public",
									"Overrides": "Property.landed()",
									"Description": "Returns the GroupOfChanges resulting from the Player's landing on this NonColorProperty"
								},

								"get_rent()": {
									"Arguments": {
										"num_owned": {
											"Type": "int",
											"Description": "The number of properties in this NonColorProperty's property group owned by the owner of this NonColorProperty"
										},
										"roll": {
											"Type": "int",
											"Description": "The roll the Player made to land on this NonColorProperty. This is used only for utilities to determine the rent. It is irrelevant for railroads"
										},
										"state": "GameState"
									},
									"Returns": "int",
									"Access": "Public",
									"Description": "Returns the amount a Player must pay when landing on this NonColorProperty given the number of properties in the group that the owner owns, the landing Player's roll, and the current GameState"
								}
					
							}
					
						}
					
					}

				}
			
			},

			"Card": {

				"Description": "Represents a square on which players draw cards. A Card can represent Chance square or Community Chest square.",
			
				"Constants": {
			
					"CHANCE_CARD": {
						"Type": "boolean",
						"Description": "Boolean choice 0 represents a chance card"
					},

					"COMMUNITY_CHEST_CARD": {
						"Type": "boolean",
						"Description": "Boolean choice 1 represents a community chest card"
					},

					"CHANCE_PER_HOUSE_FEE": {
						"Type": "int",
						"Description": "Fee charged by the chance building card per house built"
					},

					"CHANCE_PER_HOTEL_FEE": {
						"Type": "int",
						"Description": "Fee charged by the chance building card per hotel built"
					},

					"COMMUNITY_CHEST_PER_HOUSE_FEE": {
						"Type": "int",
						"Description": "Fee charged by the community chest building card per house built"
					},

					"COMMUNITY_CHEST_PER_HOTEL_FEE": {
						"Type": "int",
						"Description": "Fee charged by the community chest building card per hotel built"
					}
			
				},
			
				"Instance Variables": {
			
					"_card_type": {
						"Type": "boolean",
						"Description": "Denotes whether this card is a chance card or a community chest card"
					}
			
				},
			
				"Methods": {
			
					"Getters": {


			
					},
			
					"Setters": {
			
						
			
					},
			
					"Static": {
			
						
			
					},
			
					"Other": {
			
						"__init__()": {
							"Arguments": {
								"name": "String",
								"card_type": "boolean"
							},
							"Returns": "Card",
							"Access": "Public",
							"Description": "Initializes a card of the given type, where the constants CHANCE_CARD and COMMUNITY_CHEST_CARD can be used to denote the type"
						},

						"landed()": {
							"Arguments": {
								"player": "Player",
								"roll": "int",
								"state": "GameState"
							},
							"Returns": "GroupOfChanges",
							"Access": "Public",
							"Overrides": "Square.landed()",
							"Description": "Returns the GroupOfChanges resulting from the Player's landing on this Card"
						}
			
					}
			
				}
			
			},

			"Tax": {

				"Description": "Represents a square on which players pay a tax. These are the Income Tax and Luxury Tax squares.",
			
				"Constants": {
			
					
			
				},
			
				"Instance Variables": {

					"_tax": {
						"Type": "int",
						"Description": "The amount a Player must pay when landing on this Tax"
					}
			
				},
			
				"Methods": {
			
					"Getters": {

						"tax()": {
							"Arguments": { },
							"Returns": "int",
							"Access": "Public",
							"Inherited from": "Square",
							"Description": "Returns this instance's tax"
						}
			
					},
			
					"Setters": {
			
						
			
					},
			
					"Static": {
			
						
			
					},
			
					"Other": {
			
						"__init__()": {
							"Arguments": {
								"name": "String",
								"tax": "int"
							},
							"Returns": "Tax",
							"Access": "Public",
							"Description": "Initializes a Tax object with the given amount to tax Players"
						},

						"landed()": {
							"Arguments": {
								"player": "Player",
								"roll": "int",
								"state": "GameState"
							},
							"Returns": "GroupOfChanges",
							"Access": "Public",
							"Overrides": "Square.landed()",
							"Description": "Returns the GroupOfChanges resulting from a Player's payment of the tax"
						}
			
					}
			
				}
			
			},

			"GoToJail": {

				"Description": "Represents the single 'Go To Jail' square.",
			
				"Constants": {
			
					"JAIL_MOVES": {
						"Type": "int",
						"Description": "The number of 'in-jail moves' given to a Player when landing on this Square"
					}
			
				},
			
				"Instance Variables": {


			
				},
			
				"Methods": {
			
					"Getters": {


			
					},
			
					"Setters": {
			
						
			
					},
			
					"Static": {
			
						
			
					},
			
					"Other": {
			
						"__init__()": {
							"Arguments": {
								"name": "String"
							},
							"Returns": "GoToJail",
							"Access": "Public",
							"Description": "Initializes a GoToJail object"
						},

						"landed()": {
							"Arguments": {
								"player": "Player",
								"roll": "int",
								"state": "GameState"
							},
							"Returns": "GroupOfChanges",
							"Access": "Public",
							"Overrides": "Square.landed()",
							"Description": "Returns the GroupOfChanges sending the given Player to jail"
						}
			
					}
			
				}
			
			},

			"FreeSpace": {

				"Description": "Represents a square which has no special function in that players do not have to take action on these squares. They are Free Parking, Jail (just visiting), and Go.",
			
				"Constants": { },
			
				"Instance Variables": {


			
				},
			
				"Methods": {
			
					"Getters": {
	

			
					},
			
					"Setters": {
			
						
			
					},
			
					"Static": {
			
						
			
					},
			
					"Other": {
			
						"__init__()": {
							"Arguments": {
								"name": "String"
							},
							"Returns": "FreeSpace",
							"Access": "Public",
							"Description": "Initializes a FreeSpace object"
						},

						"landed()": {
							"Arguments": {
								"player": "Player",
								"roll": "int",
								"state": "GameState"
							},
							"Returns": "GroupOfChanges",
							"Access": "Public",
							"Overrides": "Square.landed()",
							"Description": "Returns the GroupOfChanges doing absolutely nothing"
						}
			
					}
			
				}
			
			}

		}

	}

}